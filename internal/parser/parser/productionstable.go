// Code generated by gocc; DO NOT EDIT.

package parser

import "network_go/internal/parser/ast"

type (
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib, interface{}) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Query	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Query : FieldQuery AndQuery	<< ast.NewAndQuery(X[0], X[1]) >>`,
		Id:         "Query",
		NTType:     1,
		Index:      1,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewAndQuery(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `Query : FieldQuery OrQuery	<< ast.NewOrQuery(X[0], X[1]) >>`,
		Id:         "Query",
		NTType:     1,
		Index:      2,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewOrQuery(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `Query : FieldQuery	<<  >>`,
		Id:         "Query",
		NTType:     1,
		Index:      3,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `OrQuery : "|" Query	<< X[1].(*ast.Query), nil >>`,
		Id:         "OrQuery",
		NTType:     2,
		Index:      4,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1].(*ast.Query), nil
		},
	},
	ProdTabEntry{
		String: `AndQuery : "&" Query	<< X[1].(*ast.Query), nil >>`,
		Id:         "AndQuery",
		NTType:     3,
		Index:      5,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1].(*ast.Query), nil
		},
	},
	ProdTabEntry{
		String: `Field : bucket operator matter	<< ast.NewField(X[0],X[1],X[2]) >>`,
		Id:         "Field",
		NTType:     4,
		Index:      6,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewField(X[0],X[1],X[2])
		},
	},
	ProdTabEntry{
		String: `FieldQuery : "(" Query ")"	<< X[1].(*ast.Query), nil >>`,
		Id:         "FieldQuery",
		NTType:     5,
		Index:      7,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1].(*ast.Query), nil
		},
	},
	ProdTabEntry{
		String: `FieldQuery : Field	<< ast.NewFieldQuery(X[0]) >>`,
		Id:         "FieldQuery",
		NTType:     5,
		Index:      8,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewFieldQuery(X[0])
		},
	},
}
